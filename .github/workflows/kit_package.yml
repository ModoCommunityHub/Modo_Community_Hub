# Action to generate the lpk kit file
name: Kit Release

on:
  # Triggers the workflow when a branch is merged to main
  push:
    branches: [ main ]
  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

jobs:
  # Release job is used to package the community hub kit and upload the lpk
  release:
    # We are just using python so lets use linux
    runs-on: ubuntu-latest
    steps:
      # Get the repository code
      - name: Check out repository code
        uses: actions/checkout@v2
      # Setup Python and install toml
      - name: Setup Python
        uses: actions/setup-python@v2
        with:
          python-version: "3.10"
      # Install toml so we can parse the version file
      - name: Install toml
        run: pip install toml
      # Use toml to get the version of the kit and store it as an environment variable
      - name: Get Kit Version
        run: |
          echo "KIT_VERSION=$(python -c 'import toml; print(toml.load("pyproject.toml")["project"]["version"])')" >> $GITHUB_ENV
          echo "KIT_NAME=$(python -c 'import toml; print(toml.load("pyproject.toml")["project"]["name"])')" >> $GITHUB_ENV
      # Package the lpk file
      - name: Package Kit
        run: |
          python -m scripts.build
          ls -l ./build
      # Create a tag release on the repository
      - name: Create Release
        id: create_release
        uses: actions/create-release@v1.1.4
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          # Set tag values
          tag_name: ${{ env.KIT_VERSION }}
          release_name: Modo Kit Central ${{ env.KIT_VERSION }}
          draft: false
          prerelease: false
      # Upload the .lpk file to the release tag.
      - name: Upload LPK Asset
        id: upload-release-asset
        uses: actions/upload-release-asset@v1.0.2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          KIT_FILE_NAME: ${{ env.KIT_NAME }}_${{ env.KIT_VERSION }}.lpk
        with:
          # Get the url of the checked out code
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          # Get the relative path to the generated kit
          asset_path: ./build/${{ env.KIT_FILE_NAME }}
          # Get the name of the lpk file
          asset_name: ${{ env.KIT_FILE_NAME }}
          # Mark the LPK type as zip
          asset_content_type: application/zip
